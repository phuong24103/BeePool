// <auto-generated />
using System;
using Datn_Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Datn_Api.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Datn_Shared.Models.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BillStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BillStatusId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Bills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492bf3"),
                            Address = "Bình nguyên vô tận",
                            BillStatusId = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492b15"),
                            CreateDate = new DateTime(2023, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("a77f8ae9-af3d-4288-bbf3-8f77776f9230"),
                            PaymentId = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492bf6"),
                            Price = 1500.0
                        },
                        new
                        {
                            Id = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492b13"),
                            Address = "phi phai",
                            BillStatusId = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492bf5"),
                            CreateDate = new DateTime(2023, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("a77f8ae9-af3d-4288-bbf3-8f77776f9230"),
                            PaymentId = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492b16"),
                            Price = 1450.0
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.BillDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("BillDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f95d2d6-c3d3-4749-be89-97e220d62e79"),
                            BillId = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492bf3"),
                            Price = 1500.0,
                            ProductDetailId = new Guid("1eaaba04-80ff-43a6-a746-a74a91c4c0e3"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("8f95d2d6-c3d3-4749-be89-97e220d62e78"),
                            BillId = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492b13"),
                            Price = 1450.0,
                            ProductDetailId = new Guid("979a227c-41b7-4644-8ab1-e1c8d092f79f"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.BillStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BillStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492bf5"),
                            Name = "Đã xác nhận"
                        },
                        new
                        {
                            Id = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492b15"),
                            Name = "Chờ xác nhận"
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.Cart", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalMoney")
                        .HasColumnType("float");

                    b.HasKey("CustomerId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            CustomerId = new Guid("a77f8ae9-af3d-4288-bbf3-8f77776f9230"),
                            Quantity = 0,
                            Status = 1,
                            TotalMoney = 0.0
                        },
                        new
                        {
                            CustomerId = new Guid("a77f8ae9-af3d-4288-bbf3-8f77776f9231"),
                            Quantity = 1,
                            Status = 0,
                            TotalMoney = 2000.0
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.CartDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("CartDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("357267e8-d162-4844-a660-661f46933d02"),
                            CustomerId = new Guid("a77f8ae9-af3d-4288-bbf3-8f77776f9231"),
                            Price = 2000.0,
                            ProductDetailId = new Guid("979a227c-41b7-4644-8ab1-e1c8d092f79f"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("357267e8-d162-4844-a660-661f46933d03"),
                            Name = "BK",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("357267e8-d162-4844-a660-661f46933d04"),
                            Name = "Cuetec",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("357267e8-d162-4844-a660-661f46933d05"),
                            Name = "Demon",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("357267e8-d162-4844-a660-661f46933d06"),
                            Name = "EXCEED",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("357267e8-d162-4844-a660-661f46933d07"),
                            Name = "Fury",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("357267e8-d162-4844-a660-661f46933d08"),
                            Name = "Peri Pool",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("357267e8-d162-4844-a660-661f46933d09"),
                            Name = "Predator",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("357267e8-d162-4844-a660-661f46933d00"),
                            Name = "HOW",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("357267e8-d162-4844-a660-661f46933d10"),
                            Name = "Mezz",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("357267e8-d162-4844-a660-661f46933d11"),
                            Name = "Mit",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("357267e8-d162-4844-a660-661f46933d12"),
                            Name = "Cơ Lỗ Cho Người Mới",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("357267e8-d162-4844-a660-661f46933d13"),
                            Name = "Rhino",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("357267e8-d162-4844-a660-661f46933d14"),
                            Name = "The Rack",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<Guid>("RankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RankId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a77f8ae9-af3d-4288-bbf3-8f77776f9231"),
                            AccessFailedCount = 0,
                            Address = "Hoa Thanh Quế",
                            ConcurrencyStamp = "e4bf7cff-6b1d-4814-801c-02470855c7e5",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2003, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "thanhtung@gmail.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = true,
                            NormalizedEmail = "THANHTUNG@GMAIL.COM",
                            NormalizedUserName = "THANHTUNG",
                            PasswordHash = "AQAAAAEAACcQAAAAEDnw9/bad7RVII19Bn9Zetmhe4D2/RUELI0q65G6PgafUeSuvXTxEHTAC/hp5s372A==",
                            PhoneNumber = "0696969696",
                            PhoneNumberConfirmed = false,
                            Point = 12000,
                            RankId = new Guid("a77f8ae9-af3d-4288-bbf3-8f77776f9236"),
                            SecurityStamp = "4GK7QXS2ZVKDV4BO2GGNSUH5SIGOGCMZ",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "ThanhTung"
                        },
                        new
                        {
                            Id = new Guid("a77f8ae9-af3d-4288-bbf3-8f77776f9230"),
                            AccessFailedCount = 0,
                            Address = "Hoa Thanh Quế",
                            ConcurrencyStamp = "e4bf7cff-6b1d-4814-801c-02470855c7e5",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2003, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "quynhanh@gmail.com",
                            EmailConfirmed = false,
                            Gender = 1,
                            LockoutEnabled = true,
                            NormalizedEmail = "QUYNHANH@GMAIL.COM",
                            NormalizedUserName = "QUYNHANH",
                            PasswordHash = "AQAAAAEAACcQAAAAEDnw9/bad7RVII19Bn9Zetmhe4D2/RUELI0q65G6PgafUeSuvXTxEHTAC/hp5s372A==",
                            PhoneNumber = "0363636363",
                            PhoneNumberConfirmed = false,
                            Point = 12000,
                            RankId = new Guid("a77f8ae9-af3d-4288-bbf3-8f77776f9236"),
                            SecurityStamp = "4GK7QXS2ZVKDV4BO2GGNSUH5SIGOGCMZ",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "QuynhAnh"
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Employees", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("40b601c0-2c08-449f-a41e-7564648f2c87"),
                            AccessFailedCount = 0,
                            Address = "Hoa Thanh Quế",
                            ConcurrencyStamp = "e4bf7cff-6b1d-4814-801c-02470855c7e5",
                            CreateDate = new DateTime(2020, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2003, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "quocphuong@gmail.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = true,
                            NormalizedEmail = "QUOCPHUONG@GMAIL.COM",
                            NormalizedUserName = "QUOCPHUONG",
                            PasswordHash = "AQAAAAEAACcQAAAAEDnw9/bad7RVII19Bn9Zetmhe4D2/RUELI0q65G6PgafUeSuvXTxEHTAC/hp5s372A==",
                            PhoneNumber = "06969433323",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4GK7QXS2ZVKDV4BO2GGNSUH5SIGOGCMZ",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "QuocPhuong"
                        },
                        new
                        {
                            Id = new Guid("dbca0788-4fb0-4986-8928-4df593da3f5e"),
                            AccessFailedCount = 0,
                            Address = "Hoa Thanh Quế",
                            ConcurrencyStamp = "e4bf7cff-6b1d-4814-801c-02470855c7e5",
                            CreateDate = new DateTime(2020, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2000, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vanphuong@gmail.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = true,
                            NormalizedEmail = "VANPHUONG@GMAIL.COM",
                            NormalizedUserName = "VANPHUONG",
                            PasswordHash = "AQAAAAEAACcQAAAAEDnw9/bad7RVII19Bn9Zetmhe4D2/RUELI0q65G6PgafUeSuvXTxEHTAC/hp5s372A==",
                            PhoneNumber = "0386753434",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4GK7QXS2ZVKDV4BO2GGNSUH5SIGOGCMZ",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "VanPhuong"
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492bf6"),
                            Name = "Offline"
                        },
                        new
                        {
                            Id = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492b16"),
                            Name = "Online"
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rings")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sold")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Wrap")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d8a"),
                            AvailableQuantity = 1000,
                            CategoryID = new Guid("357267e8-d162-4844-a660-661f46933d03"),
                            CreateDate = new DateTime(2023, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description",
                            Likes = 1000,
                            Name = "Gậy bida sành điệu 1",
                            Pin = "pin1",
                            Producer = "Lucasi",
                            Rings = "ring1",
                            Sold = 500,
                            Status = 0,
                            Wrap = "wrap1"
                        },
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d8b"),
                            AvailableQuantity = 2000,
                            CategoryID = new Guid("357267e8-d162-4844-a660-661f46933d04"),
                            CreateDate = new DateTime(2023, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description",
                            Likes = 1000,
                            Name = "Gậy bida sành điệu 2",
                            Pin = "pin2",
                            Producer = "Lucasi",
                            Rings = "ring2",
                            Sold = 500,
                            Status = 0,
                            Wrap = "wrap2"
                        },
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d8c"),
                            AvailableQuantity = 2000,
                            CategoryID = new Guid("357267e8-d162-4844-a660-661f46933d05"),
                            CreateDate = new DateTime(2023, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description",
                            Likes = 1000,
                            Name = "Gậy bida sành điệu 3",
                            Pin = "pin3",
                            Producer = "Lucasi",
                            Rings = "ring3",
                            Sold = 500,
                            Status = 0,
                            Wrap = "wrap3"
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.ProductDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ImportPrice")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ShaftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WeightId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.HasIndex("ShaftId");

                    b.HasIndex("TipId");

                    b.HasIndex("WeightId");

                    b.ToTable("ProductDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1eaaba04-80ff-43a6-a746-a74a91c4c0e3"),
                            CreateDate = new DateTime(2023, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description",
                            ImportPrice = 1500.0,
                            Price = 2000.0,
                            ProductID = new Guid("cc37720a-7e89-463a-9510-1936e6761d8a"),
                            Quantity = 1,
                            ShaftId = new Guid("cc37720a-7e89-463a-9510-1936e6761d83"),
                            Status = 0,
                            TipId = new Guid("cc37720a-7e89-463a-9510-1936e6761d84"),
                            WeightId = new Guid("cc37720a-7e89-463a-9510-1936e6761d85")
                        },
                        new
                        {
                            Id = new Guid("979a227c-41b7-4644-8ab1-e1c8d092f79f"),
                            CreateDate = new DateTime(2023, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description",
                            ImportPrice = 1500.0,
                            Price = 2000.0,
                            ProductID = new Guid("cc37720a-7e89-463a-9510-1936e6761d8b"),
                            Quantity = 1,
                            ShaftId = new Guid("cc37720a-7e89-463a-9510-1936e6761d73"),
                            Status = 0,
                            TipId = new Guid("cc37720a-7e89-463a-9510-1936e6761d74"),
                            WeightId = new Guid("cc37720a-7e89-463a-9510-1936e6761d75")
                        },
                        new
                        {
                            Id = new Guid("84a7b7bd-0490-4cf1-9499-1d9fe88580c3"),
                            CreateDate = new DateTime(2023, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description",
                            ImportPrice = 1500.0,
                            Price = 2000.0,
                            ProductID = new Guid("cc37720a-7e89-463a-9510-1936e6761d8c"),
                            Quantity = 1,
                            ShaftId = new Guid("cc37720a-7e89-463a-9510-1936e6761d73"),
                            Status = 0,
                            TipId = new Guid("cc37720a-7e89-463a-9510-1936e6761d74"),
                            WeightId = new Guid("cc37720a-7e89-463a-9510-1936e6761d75")
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5c65161-7591-48c1-9198-daca151bce7c"),
                            Name = "image1",
                            ProductDetailId = new Guid("1eaaba04-80ff-43a6-a746-a74a91c4c0e3"),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("e666f8b0-0d76-400e-bdb0-ca85a9ba65d1"),
                            Name = "image2",
                            ProductDetailId = new Guid("979a227c-41b7-4644-8ab1-e1c8d092f79f"),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("a9e47c8b-4af6-4ccd-b259-7367eb8f6423"),
                            Name = "image3",
                            ProductDetailId = new Guid("84a7b7bd-0490-4cf1-9499-1d9fe88580c3"),
                            Status = 0
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.Rank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NecessaryPoints")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ranks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a77f8ae9-af3d-4288-bbf3-8f77776f9232"),
                            Name = "Đồng",
                            NecessaryPoints = 1000,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("a77f8ae9-af3d-4288-bbf3-8f77776f9233"),
                            Name = "Bạc",
                            NecessaryPoints = 2000,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("a77f8ae9-af3d-4288-bbf3-8f77776f9234"),
                            Name = "Vàng",
                            NecessaryPoints = 5000,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("a77f8ae9-af3d-4288-bbf3-8f77776f9235"),
                            Name = "Bạch kim",
                            NecessaryPoints = 8000,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("a77f8ae9-af3d-4288-bbf3-8f77776f9236"),
                            Name = "Kim cương",
                            NecessaryPoints = 12000,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.Shaft", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Shafts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d83"),
                            Color = "Đen",
                            Length = 1,
                            Material = "Gỗ",
                            Name = "Cuốn chỉ",
                            Price = 100.0,
                            Size = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d73"),
                            Color = "Xanh",
                            Length = 1,
                            Material = "Gỗ",
                            Name = "Bọc da",
                            Price = 120.0,
                            Size = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d63"),
                            Color = "Đen",
                            Length = 2,
                            Material = "Nhôm",
                            Name = "Bọc cao su",
                            Price = 90.0,
                            Size = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d53"),
                            Color = "Đen",
                            Length = 2,
                            Material = "Sắt",
                            Name = "Trơn",
                            Price = 140.0,
                            Size = 2,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.Tip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tips");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d84"),
                            Color = "Đen",
                            Length = 1,
                            Material = "Gỗ",
                            Name = "F1 CLEAR",
                            Price = 100.0,
                            Size = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d74"),
                            Color = "Xanh",
                            Length = 2,
                            Material = "Gỗ",
                            Name = "F1 france",
                            Price = 140.0,
                            Size = 2,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.UsedVoucher", b =>
                {
                    b.Property<Guid>("BillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BillId");

                    b.HasIndex("VoucherId");

                    b.ToTable("UsedVouchers");

                    b.HasData(
                        new
                        {
                            BillId = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492b13"),
                            VoucherId = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492b14")
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmPloyeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EmPloyeeId");

                    b.ToTable("Vouchers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492bf4"),
                            Code = "DEMACIA",
                            EmPloyeeId = new Guid("40b601c0-2c08-449f-a41e-7564648f2c87"),
                            Status = 0,
                            TimeEnd = new DateTime(2023, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2023, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 30.0
                        },
                        new
                        {
                            Id = new Guid("a51f7c3c-a8e7-4c0a-aeea-b6fc70492b14"),
                            Code = "Pitover",
                            EmPloyeeId = new Guid("dbca0788-4fb0-4986-8928-4df593da3f5e"),
                            Status = 1,
                            TimeEnd = new DateTime(2023, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeStart = new DateTime(2023, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 50.0
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.Weight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Weights");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d85"),
                            Name = "CW4",
                            Price = 100.0,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("cc37720a-7e89-463a-9510-1936e6761d75"),
                            Name = "CW3",
                            Price = 120.0,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Datn_Shared.Models.WishList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("WishLists");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37c66a8d-acb9-41a1-af73-f46e83a578dc"),
                            CustomerId = new Guid("a77f8ae9-af3d-4288-bbf3-8f77776f9231"),
                            ProductId = new Guid("cc37720a-7e89-463a-9510-1936e6761d8a")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b108d866-eb13-46e3-b3d2-ecae4fbfe872"),
                            ConcurrencyStamp = "ddf7ed17-d371-4e69-82e6-ce94221c59e4",
                            Name = "Quản lý",
                            NormalizedName = "MANAGE"
                        },
                        new
                        {
                            Id = new Guid("b108d866-eb13-46e3-b3d2-ecae4fbfe873"),
                            ConcurrencyStamp = "bf2c2a6c-9577-4f93-a3b6-fecee88a86c5",
                            Name = "Nhân viên",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("EmployeeRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("40b601c0-2c08-449f-a41e-7564648f2c87"),
                            RoleId = new Guid("b108d866-eb13-46e3-b3d2-ecae4fbfe872")
                        },
                        new
                        {
                            UserId = new Guid("dbca0788-4fb0-4986-8928-4df593da3f5e"),
                            RoleId = new Guid("b108d866-eb13-46e3-b3d2-ecae4fbfe873")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("EmployeeTokens", (string)null);
                });

            modelBuilder.Entity("Datn_Shared.Models.Bill", b =>
                {
                    b.HasOne("Datn_Shared.Models.BillStatus", "BillStatus")
                        .WithMany("Bills")
                        .HasForeignKey("BillStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datn_Shared.Models.Customer", "Customer")
                        .WithMany("Bills")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datn_Shared.Models.Payment", "Payment")
                        .WithMany("Bills")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillStatus");

                    b.Navigation("Customer");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Datn_Shared.Models.BillDetail", b =>
                {
                    b.HasOne("Datn_Shared.Models.Bill", "Bill")
                        .WithMany("BillDetails")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datn_Shared.Models.ProductDetail", "ProductDetail")
                        .WithMany("BillDetails")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("Datn_Shared.Models.Cart", b =>
                {
                    b.HasOne("Datn_Shared.Models.Customer", "Customer")
                        .WithOne("Cart")
                        .HasForeignKey("Datn_Shared.Models.Cart", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Datn_Shared.Models.CartDetail", b =>
                {
                    b.HasOne("Datn_Shared.Models.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datn_Shared.Models.ProductDetail", "ProductDetail")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("Datn_Shared.Models.Customer", b =>
                {
                    b.HasOne("Datn_Shared.Models.Rank", "Rank")
                        .WithMany("Customers")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("Datn_Shared.Models.Product", b =>
                {
                    b.HasOne("Datn_Shared.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Datn_Shared.Models.ProductDetail", b =>
                {
                    b.HasOne("Datn_Shared.Models.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datn_Shared.Models.Shaft", "Shaft")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ShaftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datn_Shared.Models.Tip", "Tip")
                        .WithMany("ProductDetails")
                        .HasForeignKey("TipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datn_Shared.Models.Weight", "Weight")
                        .WithMany("ProductDetails")
                        .HasForeignKey("WeightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Shaft");

                    b.Navigation("Tip");

                    b.Navigation("Weight");
                });

            modelBuilder.Entity("Datn_Shared.Models.ProductImage", b =>
                {
                    b.HasOne("Datn_Shared.Models.ProductDetail", "ProductDetail")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("Datn_Shared.Models.UsedVoucher", b =>
                {
                    b.HasOne("Datn_Shared.Models.Bill", "Bill")
                        .WithOne("UsedVoucher")
                        .HasForeignKey("Datn_Shared.Models.UsedVoucher", "BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datn_Shared.Models.Voucher", "Voucher")
                        .WithMany("UsedVouchers")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Datn_Shared.Models.Voucher", b =>
                {
                    b.HasOne("Datn_Shared.Models.Employee", "Employee")
                        .WithMany("Vouchers")
                        .HasForeignKey("EmPloyeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Datn_Shared.Models.WishList", b =>
                {
                    b.HasOne("Datn_Shared.Models.Customer", "Customer")
                        .WithMany("WishLists")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datn_Shared.Models.Product", "Product")
                        .WithMany("WishLists")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Datn_Shared.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Datn_Shared.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datn_Shared.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Datn_Shared.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datn_Shared.Models.Bill", b =>
                {
                    b.Navigation("BillDetails");

                    b.Navigation("UsedVoucher")
                        .IsRequired();
                });

            modelBuilder.Entity("Datn_Shared.Models.BillStatus", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("Datn_Shared.Models.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("Datn_Shared.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Datn_Shared.Models.Customer", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("Datn_Shared.Models.Employee", b =>
                {
                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Datn_Shared.Models.Payment", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("Datn_Shared.Models.Product", b =>
                {
                    b.Navigation("ProductDetails");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("Datn_Shared.Models.ProductDetail", b =>
                {
                    b.Navigation("BillDetails");

                    b.Navigation("CartDetails");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("Datn_Shared.Models.Rank", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Datn_Shared.Models.Shaft", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("Datn_Shared.Models.Tip", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("Datn_Shared.Models.Voucher", b =>
                {
                    b.Navigation("UsedVouchers");
                });

            modelBuilder.Entity("Datn_Shared.Models.Weight", b =>
                {
                    b.Navigation("ProductDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
